#!/bin/bash
#
# Install script for the dotfiles
# It copies all files in its directory to the home directory
# Exceptions can be seen in the configuration (first code block)
# The script only handles files and folders in the home directory
# If a file already exists it asks for ignoring or overwriting
# At last it shows a information about the files in the /other folder
# If you give a filename as a parameter, only this will be processed
# Recommended / needed software can be seen with the parameter "software"
# TODO maybe in the future a recursive call would be necessary

# Configuration
dfiles=$(pwd)
ignore=(. .. other README.md install .git)
url="https://github.com/probandula/arch-dotfiles"

# Print software information
# $1: Software name
# $2: Software description
# $3: If the name is not the check command, give the command here
# $4: If the software is unable to check for (through 'which') give "n" here
# TODO Maybe there should be more possibilities for checking if sth is installed (f.e. check if file exist...)
software() {
    # Print a line of software
    line() {
        local name=$1 # Name of the software
        local call=$name # How the software can be called (for check)
        # If this parameter is given, it's the check command
        [ "$3" != "" ] && call=$3
        # Check if installed
        local inst="\x1b[0;31mNot installed\x1b[0m"
        which $call > /dev/null 2>&1 && inst="\x1b[0;32mInstalled\x1b[0m"
        # If check not possible
        [ "$4" == "n" ] && inst="\x1b[0;33mCheck not possible\x1b[0m"
        echo -e "\x1b[0;36m${name}\x1b[0m: ${2} - ${inst}"
    }

    # Print a new category heading
    cat() {
        echo
        echo -e "\x1b[4;36m${1}\x1b[0m"
    }

    # Parameters: name, description, "n" for not checkable (f.e. software without binary in $PATH)
    echo "List of sofware recommended / needed in order to use this configuration: (WIP)"

    cat "Utils"
    line "yaourt" "AUR install tool"
    line "inxi" "System information"
    line "screenfetch" "Logo and system information"
    line "dfc" "Device overview"
    line "htop" "Process information"
    line "tlp" "Fire and forget power manager"
    line "xterm" "Terminal emulator"
    line "python3" "Python interpreter"
    line "tree" "Tree file view"

    cat "Interface"
    line "x" "Xorg packages (xorg-server xorg-xinit xorg-utils xorg-server-utils)" "startx"
    line "xrandr" "Setting screen resolution"
    line "sxhkd" "X input event deamon"
    line "bspwm" "Window manager"
    line "feh" "To set a desktop wallpaper"

    cat "Development"
    line "micro" "Terminal-based text editor"
}


# Helper for check if a file / dir should be ignored
ignore_next=0
is_ignored() {
    for i in ${ignore[@]}; do
        if [ "$i" == "$1" ]; then
            ignore_next=1
            return
        fi
    done
    ignore_next=0
}

# Checks if the file already exists and if whished, copies it
dotcopy() {

    # Print a info message
    info() {
        echo -e "\x1b[0;36m${1}\x1b[0m"
    }

    # Copy the file or folder to home
    realcopy() {
        cp -r $dfiles/$1 $2/
    }

    # Check, if dotfile really exists
    if [ ! -e $dfiles/$1 ]; then
        info "ignoring: $1 (not existing)"
        return
    fi

    # Name which is logged to the info msg
    ln=$1

    # Get if dir
    [ -d $dfiles/$1 ] && ln+=" (DIR)"

    # Already exists, ask for permission to overwrite
    if [ -e $2/$1 ]; then
        read -p "Overwrite ${ln}? [y/N] " ow
        # Process
	if [ "$ow" == y ] || [ "$ow" == Y ]; then
            info "processing: ${ln}"
            realcopy $1 $2
            return
	fi
        info "ignoring: ${ln}"
        return
    fi
    # Doesn't exist, copy it
    info "processing: ${ln}"
    realcopy $1 $2
}

# Prints the directory information and let the user check if correct
dircheck() {
    # Check if both directories exist
    dpath=$(realpath $dfiles)
    opath=$(realpath $1)
    if [ ! -d $dpath ] || [ ! -d $opath ]; then
        echo -e "\x1b[0;31mOne or more paths are no directories: ${dpath} ${opath}\x1b[0m"
        echo
        exit 1
    fi

    echo -e "\x1b[0;33mPlease check first, if the directories are correct:\x1b[0m"
    echo "  Dotfiles: ${dpath}"
    echo "  Output (home): ${opath}"
    # Directories correct?
    read -p "Correct? [y/N] " cor
    if [ "$cor" != y ] && [ "$cor" != Y ]; then
        echo "Aborting"
        exit 1
    fi
}

# Default operation: Copy all files
# $1: Output directory
all() {
    dircheck $1
    for f in $dfiles/{.,}*; do
        # Get the basename
        base=$(basename "${f}")
        # Ignore specific files / folders
	is_ignored $base
        [ "$ignore_next" == 1 ] && continue

        # Copy the file
        dotcopy $base $1
    done
    # Show information for the /other files
    echo -e "\n\x1b[0;32mDotfiles installed. Don't forget about the stuff in the /other directory\x1b[0m"
}

# Print a help text
help() {
    echo -e "./install\t\tCopy all dotfiles in your home directory"
    echo -e "./install -o <dir>\tDefault operation with a custom directory to output to (not combinable)"
    echo -e "./install -h\t\tShow this help message"
    echo -e "./install -s\t\tShow software which is recommended / needed in order to use this configuration"
    echo -e "\t\t\tAlso checks if it's installed, not installed or not checkable"
    echo -e "./install <file>\tOnly copy a specific file to your home directory"
}

# START

outdir=$HOME
argc=$#
if [ "$1" == "-o" ] || [ $argc -ge 2 ]; then
    outdir=$2
    argc=0
fi

# Print header
echo
echo -e "\x1b[0;32mDotfiles (${url})\x1b[0m"
echo

# Default operation if no arguments given
if [ $argc == 0 ]; then
    all $outdir
    echo
    exit
fi

# Argument is given
case "$1" in
    # Print help text
    -h|-help|--help) help;;
    # Print software to install
    -s|--software) software;;
    # Assuming that specific file was given
    *) if [[ $1 == -* ]]; then
           echo -e "\x1b[0;31mInvalid option: $1\x1b[0m"
           help
           echo
           exit
       fi
       dircheck $outdir
       dotcopy $1 $outdir
       ;;
esac

echo
